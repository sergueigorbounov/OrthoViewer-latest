# GitLab CI configuration using conda instead of pip
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  ROCKY_HOST: "10.0.0.213"
  ROCKY_USER: "rocky"
  PROJECT_DIR: "/home/rocky/orthoviewer"
  # Security: Use variables for sensitive connection info
  BASTION_HOST: "138.102.145.13"
  BASTION_USER: "sgorboun"

stages:
  - test
  - build
  - deploy

# Backend tests using conda
test_backend:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - conda run -n orthoviewer2 pytest tests/ --cov=app --cov-report=xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

# Validate bioinformatics platform readiness
validate_platform:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - echo "Validating OrthoViewer2 Bioinformatics Platform"
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - echo "Testing genomics API endpoints..."
    - conda run -n orthoviewer2 python -c "from app.main import app; print('Platform ready')"
    - echo "Bioinformatics platform validation complete"
  only:
    - feat/GNP-6697-rocky-deployment

# Build Docker images
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend-vite
  only:
    - main
    - develop

# Pre-deployment safety confirmation - REQUIRED before deployment
pre_deploy_check:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH for ProxyJump through INRAE bastion
    - echo "Host legolas" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host rocky" >> ~/.ssh/config
    - echo "  HostName $ROCKY_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  ProxyJump legolas" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "PRE-DEPLOYMENT SAFETY CHECK - ORTHOVIEWER DIRECTORY ONLY"
    - echo "Safety check by $GITLAB_USER_NAME"
    - echo "Verifying orthoviewer directory structure"
    - ssh rocky "ls -la $PROJECT_DIR 2>/dev/null || echo 'Orthoviewer directory does not exist yet'"
    - echo "Checking current deployment status in orthoviewer directory"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml ps 2>/dev/null || echo 'No current deployment found'"
    - echo "Testing current service availability"
    - ssh rocky "curl -f http://localhost:8080 2>/dev/null && echo 'Service is healthy' || echo 'Service not responding'"
    - echo "Checking available disk space for orthoviewer"
    - ssh rocky "df -h /home/rocky"
    - echo "SAFETY CONFIRMATION - Ready for ISOLATED deployment to $PROJECT_DIR"
    - echo "Next step - Manually trigger deploy_rocky job"
    - echo "WARNING - This will ONLY affect $PROJECT_DIR directory"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual

# Deploy to Rocky VM - ISOLATED to orthoviewer directory only
deploy_rocky:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client tar
    - eval $(ssh-agent -s)
    # Temporarily commenting out SSH key loading - keys already established
    # - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH for ProxyJump through INRAE bastion
    - echo "Host legolas" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host rocky" >> ~/.ssh/config
    - echo "  HostName $ROCKY_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  ProxyJump legolas" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "üîí ISOLATED DEPLOYMENT TO ORTHOVIEWER DIRECTORY ONLY"
    - echo "Triggered by $GITLAB_USER_NAME"
    - echo "Target directory $PROJECT_DIR (isolated deployment)"
    - echo "Testing SSH connection"
    - ssh -o ConnectTimeout=10 rocky "whoami"
    - echo "Creating isolated backup in orthoviewer directory"
    - BACKUP_NAME="orthoviewer_backup_$(date +%Y%m%d_%H%M%S)"
    - ssh rocky "if [ -d $PROJECT_DIR ]; then cp -r $PROJECT_DIR /home/rocky/$BACKUP_NAME && echo 'Backup created at /home/rocky/$BACKUP_NAME'; else echo 'No existing deployment to backup'; fi"
    - echo "Creating deployment package"
    - tar -czf deploy.tar.gz --exclude='.git' --exclude='node_modules' --exclude='__pycache__' .
    - echo "Uploading package to temporary location"
    - scp deploy.tar.gz rocky:~/orthoviewer_deploy_temp.tar.gz
    - echo "Preparing isolated orthoviewer directory"
    - ssh rocky "mkdir -p $PROJECT_DIR"
    - echo "Stopping existing containers (orthoviewer only)"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml down 2>/dev/null || echo 'No containers to stop'"
    - echo "Clearing orthoviewer directory for clean deployment"
    - ssh rocky "rm -rf $PROJECT_DIR/* && echo 'Orthoviewer directory cleared'"
    - echo "Deploying to isolated orthoviewer directory"
    - ssh rocky "cd $PROJECT_DIR && tar -xzf ~/orthoviewer_deploy_temp.tar.gz"
    - echo "Starting new deployment (orthoviewer containers only)"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml up -d"
    - echo "Cleaning up temporary files"
    - ssh rocky "rm -f ~/orthoviewer_deploy_temp.tar.gz"
    - echo "Waiting for services to start"
    - sleep 10
    - echo "Testing deployment health"
    - ssh rocky "curl -f http://localhost:8080 2>/dev/null && echo '‚úÖ Deployment successful' || echo '‚ùå Deployment failed'"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml ps"
    - echo "üéâ ISOLATED DEPLOYMENT COMPLETE by $GITLAB_USER_NAME"
    - echo "Only $PROJECT_DIR affected - system remains clean"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
  allow_failure: true

# Health check job - Available to all team members (manual trigger)
health_check:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    # Temporarily commenting out SSH key loading - keys already established  
    # - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH for ProxyJump through INRAE bastion
    - echo "Host legolas" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host rocky" >> ~/.ssh/config
    - echo "  HostName $ROCKY_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  ProxyJump legolas" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "üîç Checking orthoviewer deployment health (isolated check)"
    - echo "Health check triggered by $GITLAB_USER_NAME"
    - echo "Checking containers in orthoviewer directory only"
    - ssh rocky "cd $PROJECT_DIR && docker-compose -f docker-compose.rocky.yml ps"
    - ssh rocky "curl -f http://localhost:8080"
    - echo "‚úÖ Orthoviewer health check complete"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
