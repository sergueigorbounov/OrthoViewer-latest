# GitLab CI configuration using conda instead of pip
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  ROCKY_HOST: "10.0.0.213"
  ROCKY_USER: "rocky"
  PROJECT_DIR: "/home/rocky/orthoviewer"
  # Security: Use variables for sensitive connection info
  BASTION_HOST: "legolas.versailles.inrae.fr"
  BASTION_USER: "sgorboun"

stages:
  - test
  - build
  - deploy

# Backend tests using conda
test_backend:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - conda run -n orthoviewer2 pytest tests/ --cov=app --cov-report=xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

# Validate bioinformatics platform readiness
validate_platform:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - echo "Validating OrthoViewer2 Bioinformatics Platform"
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - echo "Testing genomics API endpoints..."
    - conda run -n orthoviewer2 python -c "from app.main import app; print('Platform ready')"
    - echo "Bioinformatics platform validation complete"
  only:
    - feat/GNP-6697-rocky-deployment

# Frontend build test
test_frontend:
  stage: test
  image: node:20-slim
  before_script:
    - apt-get update && apt-get install -y python3 make g++
  script:
    - echo "Frontend Build Test"
    - cd frontend-vite
    - echo "Cleaning and installing dependencies..."
    - "rm -rf node_modules package-lock.json"
    - "npm cache clean --force"
    - "npm install --legacy-peer-deps"
    - "npm install @rollup/rollup-linux-x64-gnu --save-dev"
    - echo "Building frontend..."
    - npm run build
    - echo "Build verification..."
    - ls -la dist/
    - test -f dist/index.html || (echo "Build failed - no index.html" && exit 1)
    - echo "Frontend build test passed!"
  artifacts:
    paths:
      - frontend-vite/dist/
    expire_in: 1 hour
  only:
    - feat/GNP-6697-rocky-deployment

# Network connectivity test - Debug SSH issues
test_network:
  stage: test
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client curl iputils
    - eval $(ssh-agent -s)
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "Host legolas legolas.versailles.inrae.fr" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host 10.0.0.*" >> ~/.ssh/config
    - echo "  ProxyJump $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "NETWORK CONNECTIVITY DEBUG"
    - echo "=============================="
    - echo "Runner IP Info:"
    - ip route get 1.1.1.1 | head -1 || echo "Cannot get route info"
    - echo ""
    - echo "DNS Resolution Test:"
    - nslookup $BASTION_HOST || echo "DNS resolution failed"
    - echo ""
    - echo "Network Connectivity Test:"
    - ping -c 3 8.8.8.8 || echo "Internet connectivity failed"
    - ping -c 3 $BASTION_HOST || echo "Bastion ping failed"
    - echo ""
    - echo "SSH Configuration Test:"
    - cat ~/.ssh/config
    - echo ""
    - echo "SSH Key Test:"
    - ssh-add -l
    - echo ""
    - echo "SSH Connection Test (Bastion Only):"
    - ssh -v -o BatchMode=yes -o ConnectTimeout=10 $BASTION_USER@$BASTION_HOST "echo 'Direct bastion connection works'" || echo "Direct bastion connection failed"
    - echo ""
    - echo "SSH ProxyJump Test:"
    - ssh -v -o BatchMode=yes -o ConnectTimeout=10 $ROCKY_HOST "echo 'ProxyJump connection works'" || echo "ProxyJump connection failed"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
  allow_failure: true

# Build Docker images
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend-vite
  only:
    - main
    - develop

# Pre-deployment safety confirmation - REQUIRED before deployment
pre_deploy_check:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    # Load SSH key for deployment
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH to match working local config
    - echo "Host legolas legolas.versailles.inrae.fr" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host 10.0.0.*" >> ~/.ssh/config
    - echo "  ProxyJump $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "PRE-DEPLOYMENT SAFETY CHECK - ORTHOVIEWER DIRECTORY ONLY"
    - echo "Safety check by $GITLAB_USER_NAME"
    - echo "Testing bastion connectivity first..."
    - ssh -o ConnectTimeout=30 legolas.versailles.inrae.fr "echo 'Bastion connection successful'" || echo "WARNING - Bastion connection failed"
    - echo "Verifying orthoviewer directory structure"
    - ssh $ROCKY_HOST "ls -la $PROJECT_DIR" || echo "WARNING - Rocky connection failed"
    - echo "Checking current deployment status in orthoviewer directory"
    - ssh $ROCKY_HOST "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml ps" || echo "WARNING - Cannot check deployment status"
    - echo "Testing current service availability"
    - ssh $ROCKY_HOST "curl -f http://localhost:8080" || echo "WARNING - Cannot test service"
    - echo "Checking available disk space for orthoviewer"
    - ssh $ROCKY_HOST "df -h /home/rocky" || echo "WARNING - Cannot check disk space"
    - echo "SAFETY CONFIRMATION - Ready for ISOLATED deployment to $PROJECT_DIR"
    - echo "Next step - Manually trigger deploy_rocky job"
    - echo "WARNING - This will ONLY affect $PROJECT_DIR directory"
    - echo "Note - If connectivity issues persist check network/firewall settings"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
  allow_failure: true

# Deploy to Rocky VM - SEAMLESS FALLBACK to artifact deployment
deploy_rocky:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client tar
    - eval $(ssh-agent -s)
    # Load SSH key for deployment
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH to match working local config
    - echo "Host legolas legolas.versailles.inrae.fr" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host 10.0.0.*" >> ~/.ssh/config
    - echo "  ProxyJump $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "FULLY AUTOMATIC DEPLOYMENT - Trying direct SSH first..."
    - echo "Triggered by $GITLAB_USER_NAME"
    
    # Test SSH connectivity first
    - |
      if ssh -o ConnectTimeout=30 -o BatchMode=yes $ROCKY_HOST "echo 'SSH connection works'" 2>/dev/null; then
        echo "SSH CONNECTION SUCCESS - Proceeding with direct deployment"
        
        echo "Creating isolated backup in orthoviewer directory"
        BACKUP_NAME="orthoviewer_backup_$(date +%Y%m%d_%H%M%S)"
        ssh $ROCKY_HOST "if [ -d $PROJECT_DIR ]; then cp -r $PROJECT_DIR /home/rocky/$BACKUP_NAME && echo 'Backup created at /home/rocky/$BACKUP_NAME'; else echo 'No existing deployment to backup'; fi"
        
        echo "Creating deployment package"
        tar -czf deploy.tar.gz --exclude='.git' --exclude='node_modules' --exclude='__pycache__' .
        
        echo "Uploading package to temporary location"
        scp deploy.tar.gz $ROCKY_HOST:~/orthoviewer_deploy_temp.tar.gz
        
        echo "Preparing isolated orthoviewer directory"
        ssh $ROCKY_HOST "mkdir -p $PROJECT_DIR"
        
        echo "Stopping existing containers (orthoviewer only)"
        ssh $ROCKY_HOST "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml down 2>/dev/null || echo 'No containers to stop'"
        
        echo "Clearing orthoviewer directory for clean deployment"
        ssh $ROCKY_HOST "rm -rf $PROJECT_DIR/* && echo 'Orthoviewer directory cleared'"
        
        echo "Deploying to isolated orthoviewer directory"
        ssh $ROCKY_HOST "cd $PROJECT_DIR && tar -xzf ~/orthoviewer_deploy_temp.tar.gz"
        
        echo "Starting new deployment (orthoviewer containers only)"
        ssh $ROCKY_HOST "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml up -d"
        
        echo "Cleaning up temporary files"
        ssh $ROCKY_HOST "rm -f ~/orthoviewer_deploy_temp.tar.gz"
        
        echo "Waiting for services to start"
        sleep 10
        
        echo "Testing deployment health"
        ssh $ROCKY_HOST "curl -f http://localhost:8080 2>/dev/null && echo 'DIRECT DEPLOYMENT SUCCESSFUL' || echo 'Deployment failed'"
        ssh $ROCKY_HOST "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml ps"
        
        echo "DIRECT DEPLOYMENT COMPLETE by $GITLAB_USER_NAME"
        
      else
        echo "SSH CONNECTION FAILED - Triggering AUTOMATIC FALLBACK"
        echo "ACTIVATING DOWNSTREAM AUTOMATIC DEPLOYMENT"
        
        # Create deployment artifact for automatic deployment
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        ARTIFACT_NAME="orthoviewer-${CI_COMMIT_SHORT_SHA}-${TIMESTAMP}"
        echo "Creating artifact for automatic deployment: ${ARTIFACT_NAME}"
        
        tar --exclude='.git' --exclude='node_modules' --exclude='__pycache__' --exclude='.pytest_cache' --exclude='logs' --exclude='*.tar.gz' --warning=no-file-changed -czf "${ARTIFACT_NAME}.tar.gz" . && echo 'Archive created successfully' || echo 'Archive creation completed with warnings'
        
        echo "Artifact ready for automatic deployment"
        echo "DEPLOYMENT_NEEDED=true" > deployment.env
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}.tar.gz" >> deployment.env
        echo "Deployment environment file created"
        ls -la deployment.env
        cat deployment.env
      fi
    
  artifacts:
    paths:
      - "orthoviewer-*.tar.gz"
      - "deployment.env"
    expire_in: 1 hour
    reports:
      dotenv: deployment.env
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual

# AUTOMATIC FALLBACK DEPLOYMENT - Runs automatically when SSH fails
auto_deploy_fallback:
  stage: deploy
  image: alpine:3.19
  dependencies:
    - deploy_rocky
  before_script:
    - apk add --no-cache openssh-client tar curl
    - eval $(ssh-agent -s)
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Use direct connection approach for fallback
    - echo "Host 10.0.0.213" >> ~/.ssh/config
    - echo "  User rocky" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "AUTOMATIC FALLBACK DEPLOYMENT ACTIVATED"
    - echo "========================================"
    
    # Check if automatic deployment is needed
    - |
      if [ "${DEPLOYMENT_NEEDED}" = "true" ]; then
        echo "Automatic deployment triggered"
        echo "Using artifact: ${ARTIFACT_NAME}"
        
        # Try secure key-based deployment strategies
        echo "Strategy 1: Direct SSH with key authentication"
        if ssh -o ConnectTimeout=20 -o BatchMode=yes rocky@10.0.0.213 "echo 'Direct connection works'" 2>/dev/null; then
          echo "Direct SSH with key works - deploying automatically"
          
          scp "${ARTIFACT_NAME}" rocky@10.0.0.213:~/
          
          ssh rocky@10.0.0.213 "
            mkdir -p /home/rocky/orthoviewer
            cd /home/rocky/orthoviewer
            docker compose -f docker-compose.rocky.yml down 2>/dev/null || true
            tar -xzf ~/${ARTIFACT_NAME}
            docker compose -f docker-compose.rocky.yml up --build -d
            echo 'Automatic deployment successful!'
            docker compose -f docker-compose.rocky.yml ps
          "
          
          echo "AUTOMATIC DEPLOYMENT COMPLETED!"
          
        else
          echo "SSH key authentication failed"
          
          echo "Strategy 2: Webhook-based deployment"
          # Try webhook if configured
          if [ -n "${ROCKY_WEBHOOK_URL}" ]; then
            echo "Triggering webhook deployment..."
            if curl -X POST "${ROCKY_WEBHOOK_URL}" \
              -H "Content-Type: application/json" \
              -d "{\"artifact\":\"${ARTIFACT_NAME}\", \"commit\":\"${CI_COMMIT_SHA}\"}" 2>/dev/null; then
              echo "Webhook deployment triggered successfully!"
            else
              echo "Webhook deployment failed"
            fi
          else
            echo "No webhook URL configured"
          fi
          
          echo "Strategy 3: Creating manual deployment options"
          echo "AUTOMATIC DEPLOYMENT FAILED" > manual-intervention.txt
          echo "===========================" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "Pipeline could not deploy automatically using SSH keys." >> manual-intervention.txt
          echo "Artifact is ready for manual deployment: \${ARTIFACT_NAME}" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "DOWNLOAD ARTIFACT" >> manual-intervention.txt
          echo "GitLab -> CI/CD -> Jobs -> Download artifacts" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "DEPLOYMENT OPTIONS" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "OPTION 1 - If you have SSH key access" >> manual-intervention.txt
          echo "scp \${ARTIFACT_NAME} rocky@10.0.0.213:~/" >> manual-intervention.txt
          echo "ssh rocky@10.0.0.213" >> manual-intervention.txt
          echo "cd /home/rocky/orthoviewer" >> manual-intervention.txt
          echo "tar -xzf ~/\${ARTIFACT_NAME}" >> manual-intervention.txt
          echo "docker compose -f docker-compose.rocky.yml up --build -d" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "OPTION 2 - If you use password SSH" >> manual-intervention.txt
          echo "scp \${ARTIFACT_NAME} rocky@10.0.0.213:~/" >> manual-intervention.txt
          echo "ssh rocky@10.0.0.213" >> manual-intervention.txt
          echo "cd /home/rocky/orthoviewer" >> manual-intervention.txt
          echo "tar -xzf ~/\${ARTIFACT_NAME}" >> manual-intervention.txt
          echo "docker compose -f docker-compose.rocky.yml up --build -d" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "OPTION 3 - Through bastion server" >> manual-intervention.txt
          echo "scp \${ARTIFACT_NAME} \${BASTION_USER}@\${BASTION_HOST}:~/" >> manual-intervention.txt
          echo "ssh \${BASTION_USER}@\${BASTION_HOST}" >> manual-intervention.txt
          echo "scp \${ARTIFACT_NAME} rocky@10.0.0.213:~/" >> manual-intervention.txt
          echo "ssh rocky@10.0.0.213" >> manual-intervention.txt
          echo "cd /home/rocky/orthoviewer && tar -xzf ~/\${ARTIFACT_NAME}" >> manual-intervention.txt
          echo "docker compose -f docker-compose.rocky.yml up --build -d" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "VERIFICATION" >> manual-intervention.txt
          echo "After deployment, check: http://localhost:8080 (via SSH tunnel)" >> manual-intervention.txt
          echo "SSH tunnel: ssh -L 8080:localhost:8080 rocky@10.0.0.213" >> manual-intervention.txt
          echo "" >> manual-intervention.txt
          echo "Need help? Contact the team member who set up the SSH keys." >> manual-intervention.txt
          
          cat manual-intervention.txt
          
          # Try to send notification if configured
          if [ -n "${SLACK_WEBHOOK}" ]; then
            curl -X POST "${SLACK_WEBHOOK}" \
              -H 'Content-Type: application/json' \
              -d "{\"text\":\"ALERT: OrthoViewer deployment needs manual intervention. SSH key access failed. Artifact ${ARTIFACT_NAME} ready for download.\"}" || echo "Slack notification failed"
          fi
          
          echo "Automatic deployment failed - manual deployment required"
          echo "Instructions created in manual-intervention.txt"
          exit 1
        fi
        
      else
        echo "No automatic deployment needed - direct SSH deployment succeeded"
      fi
    
  artifacts:
    paths:
      - "manual-intervention.txt"
    expire_in: 24 hours
    when: on_failure
  rules:
    - if: '$DEPLOYMENT_NEEDED == "true"'
      when: always
    - when: never
  allow_failure: true

# Health check job - Available to all team members (manual trigger)
health_check:
  stage: deploy
  image: alpine:3.19
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    # Load SSH key for deployment
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH to match working local config
    - echo "Host legolas legolas.versailles.inrae.fr" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host 10.0.0.*" >> ~/.ssh/config
    - echo "  ProxyJump $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  ConnectTimeout 30" >> ~/.ssh/config
    - echo "  ServerAliveInterval 10" >> ~/.ssh/config
    - echo "  ServerAliveCountMax 3" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "Checking orthoviewer deployment health (isolated check)"
    - echo "Health check triggered by $GITLAB_USER_NAME"
    - echo "Checking containers in orthoviewer directory only"
    - ssh $ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.rocky.yml ps" || echo "Cannot check containers"
    - ssh $ROCKY_HOST "curl -f http://localhost:8080" || echo "Service not responding"
    - echo "Orthoviewer health check complete"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
  allow_failure: true

# GitLab Artifact-Based Deployment
build_deployment_artifact:
  stage: build
  image: node:20-slim
  before_script:
    - apt-get update && apt-get install -y python3 make g++ tar
  script:
    - "echo 'Building deployment artifact in GitLab pipeline'"
    - "echo 'This creates a downloadable deployment package'"
    - "cd frontend-vite"
    - "echo 'Cleaning and installing dependencies...'"
    - "rm -rf node_modules package-lock.json"
    - "npm cache clean --force"
    - "npm install --legacy-peer-deps"
    - "npm install @rollup/rollup-linux-x64-gnu --save-dev"
    - "echo 'Building frontend...'"
    - "npm run build"
    - "echo 'Frontend built successfully'"
    - "ls -la dist/"
    - "test -f dist/index.html || (echo 'Build failed - no index.html' && exit 1)"
    - "cd .."
    - "TIMESTAMP=$(date +%Y%m%d_%H%M%S)"
    - "ARTIFACT_NAME=\"orthoviewer-${CI_COMMIT_SHORT_SHA}-${TIMESTAMP}\""
    - "echo \"Creating artifact: ${ARTIFACT_NAME}\""
    - "echo 'DEPLOYMENT INSTRUCTIONS' > deployment-instructions.txt"
    - "echo '=========================' >> deployment-instructions.txt"
    - "echo '' >> deployment-instructions.txt"
    - "echo '1. DOWNLOAD ARTIFACT:' >> deployment-instructions.txt"
    - "echo '   - Go to GitLab CI/CD > Pipelines > Jobs' >> deployment-instructions.txt"
    - "echo '   - Find build_deployment_artifact job' >> deployment-instructions.txt"
    - "echo '   - Click Download artifacts' >> deployment-instructions.txt"
    - "echo '' >> deployment-instructions.txt"
    - "echo '2. UPLOAD TO ROCKY VM:' >> deployment-instructions.txt"
    - "echo \"   scp ${ARTIFACT_NAME}.tar.gz rocky@10.0.0.213:~/\" >> deployment-instructions.txt"
    - "echo '' >> deployment-instructions.txt"
    - "echo '3. DEPLOY ON ROCKY VM:' >> deployment-instructions.txt"
    - "echo '   ssh rocky@10.0.0.213' >> deployment-instructions.txt"
    - "echo '   cd /home/rocky/orthoviewer' >> deployment-instructions.txt"
    - "echo '   docker compose -f docker-compose.rocky.yml down' >> deployment-instructions.txt"
    - "echo \"   tar -xzf ~/${ARTIFACT_NAME}.tar.gz\" >> deployment-instructions.txt"
    - "echo '   docker compose -f docker-compose.rocky.yml up --build -d' >> deployment-instructions.txt"
    - "echo '' >> deployment-instructions.txt"
    - "echo '4. VERIFY DEPLOYMENT:' >> deployment-instructions.txt"
    - "echo '   curl http://localhost:8080' >> deployment-instructions.txt"
    - "echo '   docker compose -f docker-compose.rocky.yml ps' >> deployment-instructions.txt"
    - "echo '' >> deployment-instructions.txt"
    - "echo \"Created: $(date)\" >> deployment-instructions.txt"
    - "echo \"Commit: ${CI_COMMIT_SHA}\" >> deployment-instructions.txt"
    - "cat deployment-instructions.txt"
    - "echo 'Creating deployment archive...'"
    - "tar --exclude='.git' --exclude='node_modules' --exclude='frontend-vite/node_modules' --exclude='__pycache__' --exclude='.pytest_cache' --exclude='logs' --exclude='*.tar.gz' --warning=no-file-changed -czf \"${ARTIFACT_NAME}.tar.gz\" . && echo 'Archive created successfully' || (echo 'Archive creation failed but continuing...' && exit 0)"
    - "echo 'Deployment artifact created successfully'"
    - "ls -lh \"${ARTIFACT_NAME}.tar.gz\" && echo 'Artifact verification passed'"
    - "echo 'BUILD_DEPLOYMENT_ARTIFACT_SUCCESS=true'"
  artifacts:
    name: "orthoviewer-deployment-${CI_COMMIT_SHORT_SHA}"
    paths:
      - "orthoviewer-*.tar.gz"
      - "deployment-instructions.txt"
    expire_in: 7 days
    when: always
  only:
    - feat/GNP-6697-rocky-deployment
