stages:
  - test
  - build
  - deploy

variables:
  ROCKY_HOST: "10.0.0.213"
  ROCKY_USER: "rocky"
  PROJECT_DIR: "/home/rocky/orthoviewer"

# Test stage
test:
  stage: test
  image: python:3.9
  before_script:
    - cd backend
    - pip install -r requirements.txt
  script:
    - pytest tests/ --cov=app
  only:
    - main
    - develop

# Build stage (only test build, don't actually build for deploy)
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker info
  script:
    - echo "Testing Docker build process..."
    - docker build -t orthoviewer-frontend-test ./frontend-vite
    - docker build -t orthoviewer-backend-test ./backend
    - echo "‚úÖ Build test successful"
  only:
    - main

# Deploy to Rocky VM
deploy_rocky:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git curl bash
    - eval $(ssh-agent -s)
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $ROCKY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying OrthoViewer to Rocky VM..."
    - echo "Testing SSH connection..."
    - ssh -o ConnectTimeout=10 $ROCKY_USER@$ROCKY_HOST "whoami && echo 'SSH connection successful'"
    - echo "Creating project directory..."
    - ssh $ROCKY_USER@$ROCKY_HOST "mkdir -p $PROJECT_DIR"
    - echo "Cloning/updating repository..."
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && if [ ! -d '.git' ]; then git clone --branch docker-infrastructure-complete https://forgemia.inra.fr/pepr-breif/wp2/orthoviewer.git . ; else git fetch origin && git checkout docker-infrastructure-complete && git pull origin docker-infrastructure-complete ; fi"
    - echo "Ensuring Docker is installed..."
    - ssh $ROCKY_USER@$ROCKY_HOST "if ! command -v docker &> /dev/null; then sudo dnf update -y && sudo dnf install -y docker && sudo systemctl enable docker && sudo systemctl start docker && sudo usermod -aG docker rocky && echo 'Docker installed successfully' ; else echo 'Docker already installed' ; fi"
    - echo "Using existing docker-compose.yml from repository..."
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && sed 's/8080:80/8080:80/g' docker-compose.yml > docker-compose.vm213.yml"
    - echo "Deploying application..."
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.vm213.yml down 2>/dev/null || true"
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.vm213.yml build --no-cache"
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.vm213.yml up -d"
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && sleep 30"
    - echo "Verifying deployment..."
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.vm213.yml ps"
    - ssh $ROCKY_USER@$ROCKY_HOST "(curl -f http://localhost:8080 && echo 'Nginx is responding on port 8080') || echo 'Nginx not yet ready'"
  after_script:
    - echo "Rocky deployment completed!"
    - echo "Access URL: http://10.0.0.213:8080"
    - echo "Port forwarding: ssh -L 8080:localhost:8080 rocky@10.0.0.213"
  only:
    - docker-infrastructure-complete

# Health check job (manual trigger)
health_check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $ROCKY_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üîç Checking Rocky deployment health..."
    - ssh $ROCKY_USER@$ROCKY_HOST "cd $PROJECT_DIR && docker-compose -f docker-compose.vm213.yml ps"
    - ssh $ROCKY_USER@$ROCKY_HOST "curl -f http://localhost:8080 && echo '‚úÖ Health check passed'"
  only:
    - docker-infrastructure-complete
  when: manual
