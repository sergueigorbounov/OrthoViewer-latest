# GitLab CI configuration using conda instead of pip
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  ROCKY_HOST: "10.0.0.213"
  ROCKY_USER: "rocky"
  PROJECT_DIR: "/home/rocky/orthoviewer"
  # Security: Use variables for sensitive connection info
  BASTION_HOST: "138.102.145.13"
  BASTION_USER: "sgorboun"

stages:
  - test
  - build
  - deploy

# Backend tests using conda
test_backend:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - conda run -n orthoviewer2 pytest tests/ --cov=app --cov-report=xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

# Validate bioinformatics platform readiness
validate_platform:
  stage: test
  image: condaforge/mambaforge:latest
  before_script:
    - conda env create -f environment.yml
    - source activate orthoviewer2
  script:
    - echo "üß¨ Validating OrthoViewer2 Bioinformatics Platform"
    - cd backend
    - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    - echo "‚úÖ Testing genomics API endpoints..."
    - conda run -n orthoviewer2 python -c "
      from app.main import app;
      from app.api.biological_routes import load_mock_data;
      print('‚úÖ FastAPI app loaded successfully');
      data = load_mock_data('genes.json');
      print(f'‚úÖ Mock data loaded: {len(data.get(\"genes\", []))} genes');
      print('üß¨ Platform ready for genomics workflows!')
      "
    - echo "üöÄ Bioinformatics platform validation complete!"
  only:
    - feat/GNP-6697-rocky-deployment

# Build Docker images
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend-vite
  only:
    - main
    - develop

# Deploy to Rocky VM - Available to all team members with repo access
deploy_rocky:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client tar
    - eval $(ssh-agent -s)
    # Temporarily commenting out SSH key loading - keys already established
    # - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH for ProxyJump through INRAE bastion
    - echo "Host legolas" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host rocky" >> ~/.ssh/config
    - echo "  HostName $ROCKY_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  ProxyJump legolas" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "üß¨ Deploying OrthoViewer to Rocky VM via ProxyJump"
    - echo "üë§ Triggered by $GITLAB_USER_NAME ($GITLAB_USER_LOGIN)"
    - echo "Testing SSH connection through bastion"
    - ssh -o ConnectTimeout=10 rocky "whoami"
    - echo "Creating backup of existing deployment"
    - ssh rocky "if [ -d $PROJECT_DIR ]; then cp -r $PROJECT_DIR ${PROJECT_DIR}_backup_$(date +%Y%m%d_%H%M%S); echo 'Backup created'; else echo 'No existing deployment to backup'; fi"
    - echo "Creating deployment package"
    - tar -czf deploy.tar.gz --exclude='.git' --exclude='node_modules' --exclude='__pycache__' .
    - echo "Uploading package"
    - scp deploy.tar.gz rocky:~/
    - echo "Deploying on remote (this will restart services)"
    - ssh rocky "mkdir -p $PROJECT_DIR && cd $PROJECT_DIR && tar -xzf ~/deploy.tar.gz"
    - echo "Stopping existing containers gracefully"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml down || echo 'No containers to stop'"
    - echo "Starting new deployment"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml up -d"
    - echo "Deployment complete - checking status"
    - ssh rocky "cd $PROJECT_DIR && docker compose -f docker-compose.rocky.yml ps"
    - echo "üöÄ Deployment successful by $GITLAB_USER_NAME!"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
  allow_failure: true

# Health check job - Available to all team members (manual trigger)
health_check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    # Temporarily commenting out SSH key loading - keys already established  
    # - echo "$ROCKY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Configure SSH for ProxyJump through INRAE bastion
    - echo "Host legolas" >> ~/.ssh/config
    - echo "  HostName $BASTION_HOST" >> ~/.ssh/config
    - echo "  User $BASTION_USER" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "" >> ~/.ssh/config
    - echo "Host rocky" >> ~/.ssh/config
    - echo "  HostName $ROCKY_HOST" >> ~/.ssh/config
    - echo "  User $ROCKY_USER" >> ~/.ssh/config
    - echo "  ProxyJump legolas" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - echo "üîç Checking Rocky deployment health via ProxyJump"
    - echo "üë§ Health check triggered by $GITLAB_USER_NAME ($GITLAB_USER_LOGIN)"
    - ssh rocky "cd $PROJECT_DIR && docker-compose -f docker-compose.rocky.yml ps"
    - ssh rocky "curl -f http://localhost:8080"
    - echo "‚úÖ Health check complete by $GITLAB_USER_NAME!"
  only:
    - feat/GNP-6697-rocky-deployment
  when: manual
