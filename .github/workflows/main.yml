name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: orthoviewer2
        use-mamba: true
        environment-file: backend/environment.yml
        auto-activate-base: false
        
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install Node.js dependencies
      run: |
        cd frontend-vite
        npm install
        
    - name: Run backend tests
      shell: bash -l {0}
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml
        
    - name: Run frontend tests
      run: |
        cd frontend-vite
        npm run test
        
    - name: Run performance tests
      shell: bash -l {0}
      run: |
        cd backend
        pytest tests/performance/ --no-cov
        
    - name: Run type checks
      shell: bash -l {0}
      run: |
        mypy backend/app
        
    - name: Run linting
      shell: bash -l {0}
      run: |
        flake8 backend/app
        cd frontend-vite && npm run lint
        
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./backend/coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build backend
      run: |
        docker build -t orthoviewer-backend ./backend
        
    - name: Build frontend
      run: |
        docker build -t orthoviewer-frontend ./frontend-vite
        
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Push images
      run: |
        docker push orthoviewer-backend
        docker push orthoviewer-frontend

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/orthoviewer
          docker-compose pull
          docker-compose up -d
          docker system prune -f 